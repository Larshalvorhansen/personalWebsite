'use strict';

const peer = require('../shared/crossws.6009d265.cjs');
const error = require('../shared/crossws.deae10fd.cjs');

const deno = peer.defineWebSocketAdapter(
  (hooks, options = {}) => {
    const crossws = peer.createCrossWS(hooks, options);
    const handleUpgrade = async (req) => {
      const { headers } = await crossws.upgrade({
        url: req.url,
        headers: req.headers
      });
      const upgrade = Deno.upgradeWebSocket(req, {
        // @ts-expect-error https://github.com/denoland/deno/pull/22242
        headers
      });
      const peer$1 = new DenoWSPeer({
        deno: { ws: upgrade.socket, req }
      });
      upgrade.socket.addEventListener("open", () => {
        crossws.$("deno:open", peer$1);
        crossws.open(peer$1);
      });
      upgrade.socket.addEventListener("message", (event) => {
        crossws.$("deno:message", peer$1, event);
        crossws.message(peer$1, new peer.WSMessage(event.data));
      });
      upgrade.socket.addEventListener("close", () => {
        crossws.$("deno:close", peer$1);
        crossws.close(peer$1, {});
      });
      upgrade.socket.addEventListener("error", (error$1) => {
        crossws.$("deno:error", peer$1, error$1);
        crossws.error(peer$1, new error.WebSocketError(error$1));
      });
      return upgrade.response;
    };
    return {
      handleUpgrade
    };
  }
);
class DenoWSPeer extends peer.WSPeer {
  get id() {
    return this.ctx.deno.ws.remoteAddress;
  }
  get readyState() {
    return this.ctx.deno.ws.readyState;
  }
  get url() {
    return this.ctx.deno.req.url;
  }
  get headers() {
    return this.ctx.deno.req.headers || new Headers();
  }
  send(message) {
    this.ctx.deno.ws.send(peer.toBufferLike(message));
    return 0;
  }
}

module.exports = deno;
