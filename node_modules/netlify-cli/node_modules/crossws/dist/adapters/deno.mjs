import { d as defineWebSocketAdapter, c as createCrossWS, W as WSMessage, a as WSPeer, t as toBufferLike } from '../shared/crossws.a6b0a7cc.mjs';
import { W as WebSocketError } from '../shared/crossws.6f7f02b3.mjs';

const deno = defineWebSocketAdapter(
  (hooks, options = {}) => {
    const crossws = createCrossWS(hooks, options);
    const handleUpgrade = async (req) => {
      const { headers } = await crossws.upgrade({
        url: req.url,
        headers: req.headers
      });
      const upgrade = Deno.upgradeWebSocket(req, {
        // @ts-expect-error https://github.com/denoland/deno/pull/22242
        headers
      });
      const peer = new DenoWSPeer({
        deno: { ws: upgrade.socket, req }
      });
      upgrade.socket.addEventListener("open", () => {
        crossws.$("deno:open", peer);
        crossws.open(peer);
      });
      upgrade.socket.addEventListener("message", (event) => {
        crossws.$("deno:message", peer, event);
        crossws.message(peer, new WSMessage(event.data));
      });
      upgrade.socket.addEventListener("close", () => {
        crossws.$("deno:close", peer);
        crossws.close(peer, {});
      });
      upgrade.socket.addEventListener("error", (error) => {
        crossws.$("deno:error", peer, error);
        crossws.error(peer, new WebSocketError(error));
      });
      return upgrade.response;
    };
    return {
      handleUpgrade
    };
  }
);
class DenoWSPeer extends WSPeer {
  get id() {
    return this.ctx.deno.ws.remoteAddress;
  }
  get readyState() {
    return this.ctx.deno.ws.readyState;
  }
  get url() {
    return this.ctx.deno.req.url;
  }
  get headers() {
    return this.ctx.deno.req.headers || new Headers();
  }
  send(message) {
    this.ctx.deno.ws.send(toBufferLike(message));
    return 0;
  }
}

export { deno as default };
