export declare const parseFlags: () => Partial<{
    featureFlags: any;
    config: unknown;
    defaultConfig: any;
    cachedConfig: any;
    cachedConfigPath: unknown;
    inlineConfig: any;
    configMutations: any;
    cwd: unknown;
    packagePath: unknown;
    repositoryRoot: unknown;
    output: unknown;
    stable: boolean;
    token: unknown;
    host: unknown;
    scheme: unknown;
    pathPrefix: unknown;
    siteId: unknown;
    accountId: unknown;
    context: unknown;
    branch: unknown;
    baseRelDir: unknown;
    mode: unknown;
    debug: unknown;
    testOpts: unknown;
    offline: unknown;
    buffer: unknown;
    _: (string | number)[];
    $0: string;
} | {
    featureFlags: any;
    then<TResult1 = {
        [x: string]: unknown;
        config: unknown;
        defaultConfig: any;
        cachedConfig: any;
        cachedConfigPath: unknown;
        inlineConfig: any;
        configMutations: any;
        cwd: unknown;
        packagePath: unknown;
        repositoryRoot: unknown;
        output: unknown;
        stable: boolean;
        token: unknown;
        host: unknown;
        scheme: unknown;
        pathPrefix: unknown;
        siteId: unknown;
        accountId: unknown;
        context: unknown;
        branch: unknown;
        baseRelDir: unknown;
        mode: unknown;
        debug: unknown;
        testOpts: unknown;
        featureFlags: unknown;
        offline: unknown;
        buffer: unknown;
        _: (string | number)[];
        $0: string;
    }, TResult2 = never>(onfulfilled?: ((value: {
        [x: string]: unknown;
        config: unknown;
        defaultConfig: any;
        cachedConfig: any;
        cachedConfigPath: unknown;
        inlineConfig: any;
        configMutations: any;
        cwd: unknown;
        packagePath: unknown;
        repositoryRoot: unknown;
        output: unknown;
        stable: boolean;
        token: unknown;
        host: unknown;
        scheme: unknown;
        pathPrefix: unknown;
        siteId: unknown;
        accountId: unknown;
        context: unknown;
        branch: unknown;
        baseRelDir: unknown;
        mode: unknown;
        debug: unknown;
        testOpts: unknown;
        featureFlags: unknown;
        offline: unknown;
        buffer: unknown;
        _: (string | number)[];
        $0: string;
    }) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): Promise<TResult1 | TResult2>;
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined): Promise<{
        [x: string]: unknown;
        config: unknown;
        defaultConfig: any;
        cachedConfig: any;
        cachedConfigPath: unknown;
        inlineConfig: any;
        configMutations: any;
        cwd: unknown;
        packagePath: unknown;
        repositoryRoot: unknown;
        output: unknown;
        stable: boolean;
        token: unknown;
        host: unknown;
        scheme: unknown;
        pathPrefix: unknown;
        siteId: unknown;
        accountId: unknown;
        context: unknown;
        branch: unknown;
        baseRelDir: unknown;
        mode: unknown;
        debug: unknown;
        testOpts: unknown;
        featureFlags: unknown;
        offline: unknown;
        buffer: unknown;
        _: (string | number)[];
        $0: string;
    } | TResult>;
    finally(onfinally?: (() => void) | null | undefined): Promise<{
        [x: string]: unknown;
        config: unknown;
        defaultConfig: any;
        cachedConfig: any;
        cachedConfigPath: unknown;
        inlineConfig: any;
        configMutations: any;
        cwd: unknown;
        packagePath: unknown;
        repositoryRoot: unknown;
        output: unknown;
        stable: boolean;
        token: unknown;
        host: unknown;
        scheme: unknown;
        pathPrefix: unknown;
        siteId: unknown;
        accountId: unknown;
        context: unknown;
        branch: unknown;
        baseRelDir: unknown;
        mode: unknown;
        debug: unknown;
        testOpts: unknown;
        featureFlags: unknown;
        offline: unknown;
        buffer: unknown;
        _: (string | number)[];
        $0: string;
    }>;
    [Symbol.toStringTag]: string;
}>;
